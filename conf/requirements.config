process {
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }
  withLabel: index {
    cpus = { check_max( (params.debug ? 2 : 10) * task.attempt, 'cpus' ) }
    memory = { check_max( (params.debug ? 4.GB : 40.GB) * task.attempt, 'memory' ) }
    time = { check_max( (params.debug ? 30.m : 24.h) * task.attempt, 'time' ) }
  }
  withLabel: align {
    cpus = { check_max( (params.debug ? 2 : 10), 'cpus' ) }
    memory = { check_max( (params.debug ? 4.GB : 80.GB) * task.attempt, 'memory' ) }
    time = { check_max( (params.debug ? 10.m : 4.h) * task.attempt, 'time' ) }
    errorStrategy = { params.debug ? 'finish' : (task.attempt < process.maxRetries ? 'retry' : 'ignore') }
  }
  withLabel: benchmark {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( (params.debug ? 10.m : 1.h) * task.attempt, 'time' ) }
  }
  withLabel: quick {
    time = { check_max( 30.m * task.attempt, 'time' ) }
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( (params.debug ? 4.GB : 8.GB) * task.attempt, 'memory' ) }
  }
  withLabel: slow {
    time = { check_max( (params.debug ? 30.m : 24.h) * task.attempt, 'time' ) }
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( (params.debug ? 4.GB : 8.GB) * task.attempt, 'memory' ) }
  }
  withLabel: sort {
    cpus = { check_max( (params.debug ? 1 : 2) * task.attempt, 'cpus' ) }
    memory = { check_max( (params.debug ? 1.GB : 4.GB) * task.attempt, 'memory' ) }
    time = { check_max( (params.debug ? 10.m : 30.m) * task.attempt, 'time' ) }
  }
}

params {
  // Defaults to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 48.h
}
