// manifest {
//   homePage = 'https://github.com/csiro-crop-informatics/biokanga-manuscript'
//   description = 'Pipeline for executing experiments underpinnig biokanga publication'
//   defaultBranch = 'master'
// }


// // Global default params, used in configs
params {
//   version = '0.3' //Pipeline version
  outdir = "./results"
  infodir = "./flowinfo"
  publishmode = "copy"
  debug = false  //set true for quicker runs on subset data
  mode = 'simulatedRNA' //|realRNA|simulatedDNA|realDNA|simulatedDNA'
  // email = '' //multiple comma spearated allowed - just use -with-notification
  //RNA alignment
  debugChromosome = 'chr21'
  debugDataset = 'human_t2r1'
  adapters = false //only applicable if debug == true
  alignersRNA = 'all' //use --alignersRNA 'bwa|biokanga|dart' for specific subset, or e.g. --alignersRNA '^((?!bbmap).)*$' to exclude
  replicates = 3 //min 1 max 3 - BEERS simulated data (1 if --debug set)
  uniqed = false
  //DNA alignment
  alignersDNA = 'all' //use --alignersDNA 'bwa|biokanga|dart' for specific subset, or e.g. --alignersDNA '^((?!bbmap).)*$' to exclude
}
//Default inputs for Simulated DNA
includeConfig 'conf/simulatedDNA.config'


//Output publishing conf
includeConfig 'conf/publish.config'

//Compute requirements, CPUs, RAM, time
includeConfig 'conf/requirements.config'

//Process specific container conf
includeConfig 'conf/containers.config'

process {
  cache = 'lenient'
  errorStrategy = params.debug ? 'finish' : 'retry'
  maxRetries = 4
}

profiles {
  docker {
      docker {
        enabled = true
        fixOwnership = true
    }
  }
  awsbatch {
    aws.region = 'ap-southeast-2'
    process {
      executor = 'awsbatch'
      queue = 'flowq'
      // container = 'rsuchecki/tools:0.2' //only need standardi-ish linux toool set: wget, gawk... //replaced by individual containers where applicable
    }
    executor {
      awscli = '/home/ec2-user/miniconda/bin/aws'
    }
  }
  slurm {
    process {
      executor = 'slurm'
      scratch = true
      withLabel: 'rscript|rrender' {
        executor =  'local'
      }
    }
  }
  singularity {
    singularity {
      enabled = true
      autoMounts = true
      cacheDir = "${HOME}/singularity-images"  //when distibuting the pipeline probably should point under $workDir
    }
  }
  singularitymodule {
    process.module = 'singularity/3.0.3' //Specific to our cluster - update as required
  }

}


// //used only to spin out a "head node" on EC2 to then run the pipeline from with -profile awsbatch
// //nextflow cloud create <your-cloud-name>
// cloud {
//  imageId = 'ami-041b122e4eb7e6585'  //if no longer available, you may have to replace this with your own
//  instanceType = 't2.micro'
//  userName = 'ec2-user'
// }

//GENERATE REPORT https://www.nextflow.io/docs/latest/tracing.html#trace-report
report {
    enabled = true
    file = "${params.infodir}/report.html"
}

//GENERATE TIMELINE https://www.nextflow.io/docs/latest/tracing.html#timeline-report
timeline {
    enabled = true
    timeline.file = "${params.infodir}/timeline.html"
}

//GENERATE PIPELINE TRACE https://www.nextflow.io/docs/latest/tracing.html#trace-report
trace {
    enabled = true
    raw	= true //date and time are reported as milliseconds and memory as number of bytes
    file = "${params.infodir}/trace.tsv"
}

//GENERATE GRAPH REPRESENTATION OF THE PIPELINE FLOW
dag {
    enabled = true
    file = "${params.infodir}/dag.png"
}

// //SEND NOTIFICATION EMAIL IF ADDRESS(ES) PROVIDED -- use -N email@.... instead
// notification {
//   enabled = params.email.isEmpty() ? false : true
//   to = params.email
// }

//FROM: https://github.com/SciLifeLab/NGI-smRNAseq/blob/29c41afd45011874ed9920c5065ddff93791e3cf/nextflow.config
// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    if(obj.compareTo(params.max_memory) == 1)
      return params.max_memory
    else
      return obj
  } else if(type == 'time'){
    if(obj.compareTo(params.max_time) == 1)
      return params.max_time
    else
      return obj
  } else if(type == 'cpus'){
    return Math.min( obj, params.max_cpus )
  }
}


